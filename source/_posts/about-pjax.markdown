---
layout: post
title: "从输入一个url到展示到页面上发生了什么？"
date: 2022-03-24 23:50
comments: true
tags: 
	- 面试 
	- 计算机网络
---

>
>世界上的确没有“如果”，不过却有很多“但是”        

<!-- more -->

##**一、简介**
为什么你输入这个网站的url，就可以看到这个网站的内容呢
说实话，这个问题概括的点真的足够多，甚至每一个点都可以单独问很多很多，我先将自己最近学习理解的一些整体记下来，之后有时间再仔细学习其中的每一个点

##**二、流程**
- 输入url
- 查找强缓存
- DNS域名解析
- TCP三次握手
- 发送http请求

##**三、详细**

#### 1）输入url

用户在浏览器中输入内容，浏览器会进行判断，判断是否url，如果不是完整的url就会当成搜索内容，进行合成，合成一个合法的url，然后走搜索的url，如果是完整的url，那么进行请求访问，

##### 什么是url
在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位器），它是WWW的统一资源定位标志，就是指网络地址。
> URL由三部分组成：资源类型、存放资源的主机域名、资源文件名
> 可认为由4部分组成：协议、主机、端口、路径
> 例如：`https://wwww.baidu.com:80/search`(地址我随便定义的)

#### 2）查找强缓存

浏览器构建请求之后，会先检查强缓存，如果命中强缓存，就直接使用，否则就进行DNS域名解析

##### 强缓存
强缓存属于浏览器缓存，浏览器缓存包括强缓存和协商缓存
强缓存：直接从本地缓存读取，不去请求服务器，返回的状态码是 200
> 强缓存主要包括 expires 和 cache-control
> - expries: expires 是 HTTP1.0 中定义的缓存字段。是一个时间戳，当我们请求一个资源，服务器返回时，可以在 Response Headers 中增加 expires 字段表示资源的过期时间。
> - cache-control：由于expries存在问题（客户端和服务端存在时间差异，并且客户端的时间是可以更改的），所以HTTP1.1 新增了 cache-control 字段解决，当 cache-control 和 expires 都存在时，cache-control 优先级更高。该字段是一个时间长度，单位秒，表示该资源过了多少秒后失效。当客户端请求资源的时候，发现该资源还在有效时间内则使用该缓存，不依赖客户端时间。
> - pragma：no-cache （pragma -> cache-control -> expires）
pragma是一个在 HTTP1.0 中规定的通用首部，它用来向后兼容只支持 HTTP1.0 协议的缓存服务器，那时候 HTTP1.1 协议中的 Cache-Control 还没有出来。（注意：由于 Pragma 在 HTTP 响应中的行为没有确切规范，所以不能可靠替代 HTTP/1.1 中通用首部 Cache-Control，尽管在请求中，假如 Cache-Control 不存在的话，它的行为与 Cache-Control: no-cache 一致。建议只在需要兼容 HTTP/1.0 客户端的场合下应用 Pragma 首部。）（MDN表述）

说起缓存不止包括浏览器缓存，这里涉及的点不少，之后再详细编写文档吧

#### 3)DNS解析

说起DNS，首先要说明一个两个概念，一个是域名，一个是ip地址
- 域名： 我们输入的www.baidu.com就是域名
- ip地址：是ip协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。
而数据包是通过IP地址传给对方的。我们需要一个系统将域名转换为ip地址，这个系统就叫做DNS（域名系统）。得到ip这一步骤就是DNS解析。
浏览器有DNS缓存的功能的（即将已经解析过的域名和其对应的ip地址进行缓存）
- 域名解析：DNS协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。

##### DNS解析工作方式
先实现**递归查询**（即客户端和浏览器、本地的DNS），后**迭代查询**（本地DNS服务器与根域等等）
浏览器、操作系统、路由器都会缓存一些URL对应的IP地址，统称为DNS高速缓存。这是为了加快DNS解析速度，使得不必每次都到根域名服务器中去查询。

- 查询浏览器缓存
- 系统缓存查询，操作系统查看本地hosts文件是否对应着ip地址
- 路由器缓存查询（路由器也存在DNS缓存）
- 本地DNS服务器缓存
以上都是递归查询（即任何一步找到都会结束查找流程）
下面的是迭代查询（迭代是不会自己去查询ip，而是查找相关的服务器IP地址返回给客户端，客户端会不断的向这些服务器进行查询，直到查询到了位置），例如查询www.baidu.com
- 本地DNS服务器查询根域名服务器，该过程并不会返回映射关系，告诉本地DNS服务器去顶级域名服务器查询
- 本地DNS服务器查询顶级域名服务器(即com服务器)，同样不会返回映射关系，只会引导你去二级域名服务器查询
- 本地DNS服务器查询二级域名服务器(即baidu.com服务器)，此时已经是最后一级了，如果有则返回映射关系。

- 拿到ip后传给本地的DNS，然后返回给电脑，也会进行缓存

#### 4)TCP三次握手

- 客户端发送一个带 SYN=1，Seq=X 的数据包到服务器端口， 客户端进入SYN_SEND状态（SYN 同步位 SYN=1 表示进行一个链接请求 ｜ seq 序号 随机的）
（客户端发送位码为SYN＝1的TCP包给服务器，并且随机产生一个作为序列号，服务器接收）

- 服务器发回一个带 SYN=1， ACK=1， Seq=Y， ack=X + 1的响应包以示传达确认信息，服务器进入到SYN-RCVD状态（ACK 确认位 ACK=1 确认有效 ACK=0 确认无效 ｜ ack 确认号 对方发送的 序号+1）
（服务器收到请求后，向客户端发送确认号（即客户端发来的序列号（seq）加一），SYN=1，序列号随机数（Seq）和确认有效的ACK=1）

- 客户端再回传一个带 ACK=1，ack= Y + 1的数据包，代表握手成功
（客户端拿到后检查确认号是否正确，即第一次发送的序列号+1了，以及确认有效（ACK）是否为1，若正确，客户端会再发送确认号(服务器的序列号（Seq）+1)，确认有效为1
![tcp](../../../assets/demo/page/tcp.webp)、

> TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。
> 发送的过程中还有一个优化策略，就是把大的数据包拆成一个个小包，依次传输到接收方，接收方按照这个小包的顺序把它们组装成完整数据包。这一步也保证了TCP安全链接的一部分（数据校验）

#### 5)发送http请求

<!-- 
1. 一个url对应一套数据，有利于SEO；
2. 更改数据和url时，只是局部刷新，带来较好的用户体验；
3. 兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）；
4. 刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便；
5. 后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获） -->

##### 
##**五、参考资料**
[jquery-pjax](https://github.com/defunkt/jquery-pjax)                 
[welefen封装的pjax](https://github.com/welefen/pjax)



