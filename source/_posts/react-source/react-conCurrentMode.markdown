---
layout: post
title: "react 源码-conCurrent Mode"
date: 2022-06-27 20:00
comments: true
tags:
  - react
  - 源码
---

> 天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。
>
> <p align="right">——钱钟书《围城》</p>

<!-- more -->

#### 概览

Concurrent Mode 自底向上都包含哪些组成部分，

##### 底层架构 —— Fiber 架构

使用 Fiber，意义在于他将单个组件作为工作单元，使以组件为粒度的“异步可中断的更新”成为可能。

##### 架构的驱动力 —— Scheduler

使用 Fiber 配合时间切片，就能根据宿主环境性能，为每个工作单元分配一个可运行时间，实现“异步可中断的更新”。

##### 架构运行策略 —— lane 模型

React 可以控制更新在 Fiber 架构中运行/中断/继续运行， 后一次更新打断了前一次更新。这就是优先级的概念：需要一个模型控制不同优先级之间的关系与行为，于是 lane 模型诞生了

##### 上层实现

- batchedUpdates：之前的实现局限很多（脱离当前上下文环境的更新不会被合并）。在 Concurrent Mode 中，是以优先级为依据对更新进行合并的，使用范围更广。
- Suspense：Suspense (opens new window)可以在组件请求数据时展示一个 pending 状态。请求成功后渲染数据。本质上讲 Suspense 内的组件子树比组件树的其他部分拥有更低的优先级。
- useDeferredValue：返回一个延迟响应的值，内部会调用 useState 并触发一次更新，这次更新的优先级很低，但是当超过 timeoutMs（传参）后 useDeferredValue 产生的更新还没进行（由于优先级太低一直被打断），则会再触发一次高优先级更新。
